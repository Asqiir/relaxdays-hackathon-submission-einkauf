openapi: '3.0.0'
info:
  title: Aufgabe Lager
  version: 0.1.1
servers:
  - url: http://0.0.0.0:8080
paths:
  /purchase:
    post:
      summary: add a new purchase
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/Purchase'
      responses:
        200:
          description: OK
  /purchases:
    get:
      summary: Returns a list of purchases.
      responses:
        '200':    # status code
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Purchase'
  /purchasesForArticle:
    get:
      summary: Returns a list of the purchases that bought article with given articleID
      parameters:
        - in: query
          name: x
          schema:
            type: integer
          description: the articleID for which any purchase buying that article will be returned
      responses:
        '200':
          description: OK
  /searchLieferant:
    get:
      summary: returns a list of lieferanten that have a levenshtein-distance to the search word of at most 10
      parameters:
        - in: query
          name: x
          schema:
            type: string
          description: the search word
      responses:
        '200':
          description: OK
  /purchasesBetween:
    get:
      summary: returs a list of purchases that were done between the 2 given dates
      parameters:
        - in: query
          name: x
          schema:
            type: string
            format: date
        - in: query
          name: y
          schema:
            type: string
            format: date
      responses:
        '200':
          description: OK
  /plot:
    get:
      summary: returns a plot of price of article by time
      parameters:
        - in: query
          name: x
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            image/png:
              schema:
                type: string
                format: binary
  /articlesForLieferant:
    get:
      summary: return a list of articles of lieferant x ordered ascending but most recent price
      parameters:
        - in: query
          name: x
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Purchase'
components:
  schemas:
    Purchase:
      type: object
      required:
        - lieferant
        - articleID
        - menge
        - preis
      properties:
        lieferant:
          type: string
        articleID: 
          type: integer
        menge:
          type: integer
        preis:
          type: integer
          multipleOf: 0.01
